---
- name: install services
  include: install_service.yml
  vars:
    name: "{{ item.name }}"
    package: "{{ item.package }}"
    service: "{{ item.service }}"
  with_items:
    - { name: "web server", package: "httpd", service: "httpd" }
    - { name: "firewall", package: "firewalld", service: "firewalld" }

- name: install extra packages
  package:
    name:
      - mod_ssl
      - npm
      - java-11-openjdk-devel
      - maven
      - postgresql-server
    state: present

- name: configure firewall
  firewalld:
    service: "{{ item }}"
    immediate: true
    permanent: yes
    state: enabled
  with_items:
    - http
    - https

- name: Initializing postgres
  include: run_shell.yml
  vars:
    name: Initializing postgres
    command: postgresql-setup --initdb
    
- name: start postgresql
  service:
    name: postgresql
    state: started
    enabled: true

- name: create postgres user
  postgresql_user:
    name: "{{ database_username }}"
    password: "{{ database_password }}"
    state: present

- name: create postgres database
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_username }}"
    state: present

- name: create postgres post table
  postgresql_table:
    db: "{{ database_name }}"
    table: "post"
    owner: "{{ database_username }}"
    state: present
    columns:
      - id serial NOT NULL PRIMARY KEY
      - identifier text NOT NULL UNIQUE
      - title text NOT NULL
      - summary text NOT NULL
      - body text NOT NULL
      - created_on timestamp with time zone NOT NULL
      - updated_on timestamp with time zone
      - visible boolean NOT NULL DEFAULT true

- name: create web root directory
  file:
    path: "{{ web_root }}/{{ site_name }}"
    state: directory
    mode: 0644
    owner: root
    group: root
    recurse: yes

- name: copy site configuration
  template:
    src: ../templates/site.conf.j2
    dest: "{{ web_conf_dir}}/{{ site_name }}.conf"
    owner: root
    group: root
    mode: 0644

- name: create ssl config directory
  file:
    path: "{{ web_ssl_dir }}"
    state: directory
    mode: 0644
    owner: root
    group: root
    recurse: yes

- name: install ssl certificates
  unarchive:
    src: ../files/ssl_certificates.tar.gz
    dest: "{{ web_ssl_dir }}/"
  notify:
    - restart_web

- name: create backend directory
  file:
    path: "{{ backend_root }}/{{ backend_name }}/config"
    state: directory
    mode: 0644
    owner: root
    group: root
    recurse: yes

- name: copy backend configuration
  template:
    src: ../templates/application.yml.j2
    dest: "{{ backend_root}}/{{ backend_name }}/config/application.yml"
    owner: root
    group: root
    mode: 0644

- name: checkout repos
  include: checkout_repo.yml
  vars:
    name: "{{ item.name }}"
    checkout_dir: "{{ item.checkout_dir }}"
    repo: "{{ item.repo }}"
    user: "{{ item.user }}"
  with_items:
    - { name: "backend", checkout_dir: "{{ backend_checkout_dir }}", repo: "{{ backend_repo }}", user: "ansible" }
    - { name: "website", checkout_dir: "{{ jsemple_dev_checkout_dir }}", repo: "{{ jsemple_dev_repo }}", user: "ansible" }

- name: Building backend
  include: run_shell.yml
  vars:
    name: Building backend
    command: cd {{ backend_checkout_dir }} && mvn clean install

- name: copy backend app
  copy:
    src: "{{ backend_checkout_dir }}/target/{{ backend_name }}*.jar"
    dest: "{{ backend_root}}/{{ backend_name }}/{{ backend_name }}.jar"
    owner: root
    group: root
    mode: 0755
    remote_src: yes

- name: remove backend repo directory
  file:
    path: "{{ backend_checkout_dir }}"
    state: absent

- name: copy backend service
  template:
    src: ../templates/backend.service.j2
    dest: "/etc/systemd/system/{{ backend_name }}.service"
    owner: root
    group: root
    mode: 0644

- name: start service {{ backend_name }}
  service:
    name: "{{ backend_name }}"
    state: started
    enabled: true

- name: install website dependencies
  shell: npm install
  become: false
  remote_user: ansible
  args:
    chdir: "{{ jsemple_dev_checkout_dir }}"

- name: build website
  shell: npm run build
  args:
    chdir: "{{ jsemple_dev_checkout_dir }}"

- name: synchronize web root with website
  synchronize:
    src: "{{ jsemple_dev_checkout_dir }}/build/"
    dest: "{{ web_root }}/{{ site_name }}"
    delete: yes
    recursive: yes
  delegate_to: "{{ inventory_hostname }}"

- name: remove website repo directory
  file:
    path: "{{ jsemple_dev_checkout_dir }}"
    state: absent
...
