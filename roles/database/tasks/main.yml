---
- name: install packages
  package:
    name:
      - postgresql-server
      - postgresql-libs
      - libpq-devel
      - gcc
      - platform-python-devel.x86_64
    state: present

- name: install pip packages
  pip:
    name:
      - psycopg2
      - google-api-python-client
      - google-auth-httplib2
      - google-auth-oauthlib
    state: present

- name: Initializing postgres
  include: run_shell.yml
  vars:
    name: Initializing postgres
    command: postgresql-setup --initdb
    ignore_errors: yes

- name: set pg hba rules
  postgresql_pg_hba:
    state: present
    dest: /var/lib/pgsql/data/pg_hba.conf
    contype: host
    users: "{{ database_username }}"
    databases: "{{ database_name }}"
    method: md5
  notify:
    - restart_db
    
- name: start postgresql
  service:
    name: postgresql
    state: restarted
    enabled: true

- name: create postgres user
  become: true
  become_user: postgres
  postgresql_user:
    name: "{{ database_username }}"
    password: "{{ database_password }}"
    state: present

- name: create postgres database
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ database_name }}"
    owner: "{{ database_username }}"
    state: present

- name: create postgres post table
  become: true
  become_user: postgres
  postgresql_table:
    db: "{{ database_name }}"
    table: "post"
    owner: "{{ database_username }}"
    state: present
    columns:
      - id serial NOT NULL PRIMARY KEY
      - identifier text NOT NULL UNIQUE
      - title text NOT NULL
      - summary text NOT NULL
      - body text NOT NULL
      - created_on timestamp with time zone NOT NULL
      - updated_on timestamp with time zone
      - visible boolean NOT NULL DEFAULT true

- name: create scripts directory
  file:
    path: "{{ script_root }}/{{ project_name }}"
    state: directory
    mode: 0755
    owner: root
    group: root
    recurse: yes

- name: copy backup script
  copy:
    src: ../files/backup-database.py
    dest: "{{ script_root }}/{{ project_name }}/backup.py"
    owner: root
    group: root
    mode: 0755

- name: copy backup credentials
  copy:
    src: ../files/credentials.json
    dest: "{{ script_root }}/{{ project_name }}/credentials.json"
    owner: root
    group: root
    mode: 0600

- name: copy backup token
  copy:
    src: ../files/token.pickle
    dest: "{{ script_root }}/{{ project_name }}/token.pickle"
    owner: root
    group: root
    mode: 0600

- name: copy public encryption key file
  copy:
    src: ../files/public.pgp
    dest: /tmp/public.pgp
    owner: root
    group: root
    mode: 0644

- name: import public encryption key
  include: run_shell.yml
  vars:
    name: Building backend
    command: gpg --import /tmp/public.pgp
    ignore_errors: no

- name: remove public encryption key file
  file:
    path: /tmp/public.pgp
    state: absent

- name: copy database backup cron
  template:
    src: ../templates/backup-database.cron.j2
    dest: /etc/cron.d/backup-database.cron
    owner: root
    group: root
    mode: 0644
...
